player Object:
var player = {};
player.ID = integer; ID number for that tournament. Does not persist outside of a tournament.
player.fullName = string; Likely the most unique identifier outside of a tournament.
player.email = string; Primary contact for player. Should not persist outside of a tournament?
player.short_names = [short_name1,short_name2,etc.]; Array of shortened names of a player. Use the first-most name that doesn't collide with another player. If the player has a nickname, this array will only contain that name.
player.short_name = string; The short name they
player.stillPlaying = boolean; If the player is still playing (true) or if they've dropped (false) from the tournament.
player.paid = boolean; If the player has paid their registration for the tourmament.
player.club = string; What club or region the player is from. Pairer can avoid pairing players from the same region against each other.
player.faction = string; What in-game faction (guild, race, country etc.) the player is using. Maybe prefer different factions in consecutive rounds?

// The SQL standard specifies an array column type which PostgreSQL
// supports but MySQL doesn't (yet?). I'll probably use it anyway since
// I'm already using PostgreSQL despite my concerns of keeping the app
// easily portable to MySQL.
SQL structure (layout?)
schema: nameschema
  table: shortenednames
    column: long_names (primary)
    column: shortened_names
  table: nicknames
    column: real_name (primary)
    column: nickname
schema: tournament00000000 // 'tournament' plus a unique 8 digit string between 00000000 and zzzzzzzz - 18 characters total
  table: infotable(?)
    column: tournament name
    column: tournament date - Automatically remove the oldest tournament once we approach the database limit.
    column: completed - Flag set by a control on the Final Standings page?
    column: rounds_played
  table: playertable
    column: id (int) (primary)
    column: full_name (text) - May as well use text type since it's supported by PostgreSQL
    column: email(!) (text) - Should be secure?
    column: short_name (text) - Usually undefined. Set if the user has manually entered a short name.
    column: stillplaying (bool)
    column: paid (bool)
    column: club (text)
    column: faction (text)
    column: opponentids (int array)
    column: tablenumbers (int array)
    column: score (int[]) Primary score of the tournament
    column: tiebreak<0-9> (int[]) Tiebreakers. PostgreSQL will only automatically enlarge a 1D array and I haven't thought of a way to make this 
  table: round<1-999> // 'round' + round_number, a number from 1 - 99999999 (potentially unlimited?) to hold the round data.
    column: table (smallint) // This will be unique
    column: player1 (int) - id. Retrieve full name from table before sending to Elo site.
    column: player2 (int)
    column: result (int) - 0: Unplayed, 1: Player 1 victory, 2: Player 2 victory, 3: Draw (For exporting to Elo site)

// Cookies
nicktt_currenttournament=12345678 : Current tournament-key (8 character alpha-numeric string). Expires 100 days
nicktt_recenttournaments=12345678-12345678-12345678 : Recently accessed tournaments. Max 10? Too many may break the load dialogue. Expires 100 days.

// Misc.
Detect pressing tab on the "faction" player detail box with keydown (tab has keyCode 9).
When you switch to Bootstrap, you may need to replace .button().click(... with just click(.

// Home, Load
A drop down that is always open is called a "select"

// Round Draws
SELECT * FROM information_schema.tables WHERE table_schema 'tournament00000000' AND table_name LIKE 'round_%';
