// Requires
var fs = require( 'fs' );
// My requires
var $ = jQuery = require('jquery');
require('jquery-csv');

var csvOptions = {};

// This is an Object of functions which works because you can call
// object.keyName or object['keyName'] to access object elements.
// E.g. calling bfun.helloWorld() and bfun['helloWorld']() both work.
var bfun = {};

bfun.loadFile = function ( somePath ) {
  var fileOptions = 'utf8';
  var outString = fs.readFileSync( somePath, fileOptions );
  return outString;
};

bfun.loadCSV = function ( someString ) {
  // Remove spaces between " and ,
  someString = someString.replace( /"\s+,/g, '",' );
  // Remove spaces between , and "
  someString = someString.replace( /,\s+"/g, ',"' );
  // Remove spaces before 
  var outArray = $.csv.toArrays( someString, csvOptions );
  return outArray;
};
  
bfun.loadCSVObjects = function ( someString ) {
  /* If you call toObjects with no callback and without the option
   * start: 1, it breaks on subsequent calls, missing the first, then
   * second, then third, etc. rows.
   * */
  var outArray = $.csv.toObjects( someString, {start: 1} );
  return outArray;
};
  
bfun.loadCSVFile = function ( somePath ) {
  var outArray = $.csv.toArrays( bfun.loadFile( somePath ), csvOptions );
  return outArray;
};
  
bfun.loadCSVObjectsFile = function ( somePath ) {
  //console.log(bfun.loadFile( somePath ));
  var outArray = bfun.loadCSVObjects( bfun.loadFile( somePath ) );
  //console.log(outArray);
  return outArray;
};
  
bfun.removeWhiteSpace = function ( someString ) {
  // Replace multiple spaces with one, REMOVE leading and trailing spaces.
  return someString.replace( /[\s\n\r]+/g, ' ' ).replace( /^\s|\s$/g, '' );
  // This matches leading and trailing spaces of any number /^\s+|\s+$/g
};
  
bfun.trimAroundHyphen = function ( someString ) {
  //var trimedOfSpaces = someString.replace( /[\s\n\r]+/g, ' ' ).replace( /^\s|\s$/g, '' );
  var trimedOfSpaces = bfun.removeWhiteSpace( someString );
  return trimedOfSpaces.replace( /(\s)*-(\s)*/g, '-' );
};
  
// Returns initials of a hyphenated name otherwise just returns the name.
// e.g. Jean-SÃ©bastien > JS
bfun.shortenHyphenName = function ( someSubstring ) {
  //var firstPart = someSubstring.match( /^\w+-/ );
  //var otherParts = someSubstring.match( /-[^-\s]+/g );
  var nameParts = someSubstring.match( /[^-\s]+/g ); // Match all non-whitespace, non-hyphen strings of any length.
  if ( nameParts.length == 1 ) {
    return nameParts[0];
  } else {
    var nameInitials = '';
    for ( var i = 0; i < nameParts.length; i++ ) {
      nameInitials = nameInitials + nameParts[i].substring( 0,1 );
    }
    return nameInitials;
  }
};
  
bfun.initialHyphenName = function ( someSubstring ) {
  var nameParts = someSubstring.match( /[^-\s]+/g ); // Match all non-whitespace, non-hyphen strings of any length.
  var nameInitials = '';
  for ( var i = 0; i < nameParts.length; i++ ) {
    nameInitials = nameInitials + nameParts[i].substring( 0,1 );
  }
  return nameInitials;
};

bfun.randomString = function ( strLength, charSet ) {
  var result = [];
  strLength = strLength || 5;
  charSet = charSet || 'abcdefghijklmnopqrstuvwxyz0123456789';
  //charSet = charSet || '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  while ( result.length < strLength ) {
    result.push(charSet.charAt(Math.floor(Math.random() * charSet.length)));
  }
  return result.join('');
}

bfun.tKey2tSchema = function (tKey) {
  return 'tournament' + tKey.toLowerCase().replace( /[^a-z|\d]/g, '' );
};

bfun.tSchema2tKey = function (tSchema) {
  return tSchema.substring(10, tSchema.length).toLowerCase();
};

bfun.generateNewSchema = function (keyLength, schemaList) {
  var maxAttempts = Math.pow( 36, keyLength);
  while (maxAttempts--) { // This should complete very quickly.
    var newKey = bfun.randomString(keyLength).toLowerCase();
    var newSchema = bfun.tKey2tSchema(newKey); // This is generated by us so can't contain a SQLi
    if (schemaList.indexOf(newSchema) == -1) {
      return newSchema;
    };
  };
  return false;
};

bfun.helloWorld = function () {
  console.log('Hello World');
};

bfun.helloWorldN = function ( n ) {
  for ( var i = 0; i < n; i++ ) {
    bfun.helloWorld();
  }
};

bfun.testCSV = function () {
  // It actually works properly though...
  console.log('Testing csvToObjects');
  var someString = 'long_name,short_name\nChristopher,Chris\nDavid,Dave\nNicholas,Nick'
  var outArray1 = $.csv.toObjects( someString, {} );
  var outArray2 = $.csv.toObjects( someString, {} );
  console.log(outArray1);
  console.log(outArray2);
};

module.exports = bfun;

console.log('Loaded bfun');
